# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
    
        """
        temp1 = []
        temp2 = []
        while l1 or l2:
            if l1:
                temp1.append(l1.val)
                l1 = l1.next
            if l2:
                temp2.append(l2.val)
                l2 = l2.next
         
        temp1 = temp1[::-1]
        temp2 = temp2[::-1]
        s1 = int(''.join(map(str, temp1)))
        s2 = int(''.join(map(str, temp2)))
        
        sum = s1 + s2
        
        l3 = []
        while(sum > 0):
            l3.append(sum % 10)
            sum = sum //10
        l3 = l3[::-1]
        
        if l3:
            head = ListNode(l3.pop())
            temp =  head
            while(len(l3) > 0):
                temp.next = ListNode(l3.pop())
                temp = temp.next
            return head
        else:
            return [0]
        """
        
        ret = ListNode(0)
        cur = ret
        add = 0
        while l1 or l2 or add:
            val = (l1.val if l1 else 0) +(l2.val if l2 else 0)+ add
            add = val//10
            cur.next = ListNode(val%10)
            cur = cur.next
            l1 = l1.next if l1 else None
            l2 = l2.next if l2 else None
        
        return ret.next
            
